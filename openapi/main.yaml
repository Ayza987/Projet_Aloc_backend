openapi: "3.0.3"
info:
  title: "Allocation API"
  description: "Backend application for resources allocation system"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
    description: "Local server"

tags:
  - name: "User"
    description: "Operations on users"
  - name: "Demand"
    description: "Operations on requests"
  - name: "Resource"
    description: "Operations on resources"
  - name: "Allocation"
    description: "Operations on allocations"
paths:
  /auth/signup:
    post:
      tags:
        - "User"
      summary: "Create an account"
      description: "Create an endpoint for signing up the users"
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestDTO'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponseDTO'
        '403':
          description: Forbidden access
        '400':
          description: Bad Request
  /user/{id}:
    patch:
      tags:
        - "User"
      description: "Create an endpoint for updating a user"
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          description: "The id of the user to update"
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestDTO'
      responses:
        '200':
          description: "User updated successfully"
        '404':
          description: Not found
  /users:
    get:
      tags:
        - "User"
      description: "Get all users"
      operationId: getAllUsers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: Not found
  /users/{id}:
    get:
      tags:
        - "User"
      description: "Get a user by its id"
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          description: "The id of the user to get"
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: Not found
  /users/delete/{id}:
      delete:
        tags:
          - "User"
        description: "Delete a user"
        operationId: deleteUser
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: "User deleted successfully"
          '404':
              description: "Not Found"
  /users/search:
    get:
      tags:
        - "User"
      summary: "Search users"
      description: "Get the list of all the users according to a research"
      operationId: searchUsers
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: Not found
  /createDemand:
    post:
      tags:
        - "Demand"
      summary: "Create a demand"
      description: "Create an endpoint for registering a demand"
      operationId: createDemand
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDemandRequestDTO'
      responses:
        '200':
          description: "Request created successfully"
        '400':
          description: "Bad Request"
  /demands:
      get:
        tags:
          - "Demand"
        summary: "Get all demands"
        description: "Create an endpoint to get all the demands"
        operationId: getAllDemands
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DemandDTO'
          '404':
            description: Not found
  /demands/{userEmail}:
    get:
      tags:
        - "Demand"
      summary: "Get demands by email"
      description: "Create an endpoint to get the demands by email"
      operationId: getDemandsByEmail
      parameters:
        - name: userEmail
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandDTO'
        '404':
          description: Not found
        '400':
          description: Bad request
  /demand/{id}:
    patch:
      tags:
        - "Demand"
      summary: "Update a demand"
      description: "Create an endpoint to update a demand"
      operationId: updateDemand
      parameters:
        - name: id
          in: path
          required: true
          description: "The id of the user to update"
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDemandDTO'
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
  /demands/delete/{id}:
    delete:
      tags:
        - "Demand"
      summary: "Delete a demand"
      description: "Create an endpoint to delete a demand"
      operationId: deleteDemand
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Demand deleted successfully"
        '404':
          description: "Not Found"
  /demands/updateUrgency/{id}:
    patch:
      tags:
        - "Demand"
      description: "Change the urgency of a demand"
      operationId: updateUrgency
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '404':
          description: Not found
  /demand/allocate:
    post:
      tags:
        - "Demands"
      description: "Allocate a resource"
      operationId: allocateResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllocateResourceRequestDTO'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocatedResourceDTO'
        '400':
          description: Bad request
        '404':
          description: Not found
  /demand/reject:
    post:
      tags:
        - "Demands"
      description: "Reject an allocation demand"
      operationId: rejectDemand
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectDemandRequestDTO'
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '404':
          description: Not found
  /demands/search:
    get:
      tags:
        - "Demand"
      summary: "Search demands"
      description: "Get the list of all the demands according to a research"
      operationId: searchDemands
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandDTO'
        '404':
          description: Not found
  /createResource:
    post:
      tags:
        - "Resource"
      summary: "Create a resource"
      description: "Create and endpoint to add a new resource"
      operationId: createResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceRequestDTO'
      responses:
        '200':
          description: "Resource created successfully"
        '400':
          description: "Bad Request"
  /resources:
    get:
      tags:
        - "Resource"
      summary: "Get all resources"
      description: "Get the list of all the resources"
      operationId: getAllResources
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDTO'
        '404':
          description: Not found
  /resources/{id}:
    get:
      tags:
        - "Resource"
      summary: "Get a resource"
      description: "Create an endpoint to get a resource by its id"
      operationId: getResource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDTO'
        '404':
          description: Not found
  /resource/{id}:
    patch:
      tags:
        - "Resource"
      summary: "Update a resource"
      description: "Create an endpoint to update a resource"
      operationId: updateResource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceDTO'
      responses:
        '200':
          description: Success
        '404':
          description: Not found
  /resources/delete/{id}:
    delete:
      tags:
        - "Resource"
      summary: "Delete a resource"
      description: "Create an endpoint to delete a resource"
      operationId: deleteResource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Resource deleted successfully"
        '404':
          description: "Not Found"
  /resources/availability/{id}:
    patch:
      tags:
        - "Resource"
      description: "Change the availability status of a resource"
      operationId: updateAvailability
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDTO'
        '404':
          description: Not found
  /resources/search:
    get:
      tags:
        - "Resource"
      summary: "Search resources"
      description: "Get the list of all the resources according to a research"
      operationId: searchResources
      parameters:
        - name: userEmail
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDTO'
        '404':
          description: Not found
  /allocatedResources/search:
    get:
      tags:
        - "Allocation"
      summary: "Search allocated resources"
      description: "Get the list of all the allocated resources according to a research"
      operationId: searchAllocatedResources
      parameters:
        - name: userEmail
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocatedResourceDTO'
        '404':
          description: Not found
  /allocatedResources:
    get:
      tags:
        - "Allocation"
      summary: "Get all allocated resources"
      description: "Get the list of all the allocated resources"
      operationId: getAllocatedResources
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocatedResourceDTO'
        '404':
          description: Not found
  /allocatedResource/{userEmail}:
    get:
      tags:
        - "Allocation"
      summary: "Get allocated resource by userEmail"
      description: "Get an allocated resource using the userEmail"
      operationId: getAllocatedResourceByUserEmail
      parameters:
        - name: userEmail
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocatedResourceDTO'
        '404':
          description: Not found
  /allocatedResource/updateStatus/{id}:
    patch:
      tags:
        - "Allocation"
      description: "Change the status of an allocated resource"
      operationId: updateStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '404':
          description: Not found
  /password/reset-request:
    post:
      summary: Reset password request
      operationId: requestPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequestDTO'
      responses:
        '200':
          description: Success
        '404':
          description: User not found
  /password/reset:
    post:
      summary: Reset password
      operationId: passwordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetDTO'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request



















components:
  schemas:
    AuthenticationRequestDTO:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@entreprise.com"
        password:
          type: string
          format: password

    AuthenticationResponseDTO:
      type: object
      properties:
        token:
          type: string
        isAdmin:
          type: boolean
          example: true

    ErrorDTO:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
          example: "Invalid credentials"

    SignupRequestDTO:
      type: object
      required:
        - name
        - surname
        - email
      properties:
        name:
          type: string
          example: "name"
        surname:
          type: string
          example: "surname"
        email:
          type: string
          format: email
          example: "user@entreprise.com"

    SignupResponseDTO:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
          example: "User created successfully"

    ForbiddenAccessDTO:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
          example: "User has not access"

    BadRequestDTO:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
          example: "Invalid data"

    UpdateUserRequestDTO:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        surname:
          type: string

    UserDTO:
     type: object
     properties:
       id:
          type: integer
          format: int64
       name:
          type: string
       surname:
          type: string
       email:
          type: string

    DemandUrgency:
      type: string
      enum:
        - URGENT
        - NOT_URGENT

    DemandStatus:
      type: string
      enum:
        - PENDING
        - APPROVED
        - REJECTED

    CreateDemandRequestDTO:
     type: object
     properties:
       resource_name:
         type: string
       quantity:
         type: integer
       description:
         type: string
       justification:
         type: string
       urgency:
           $ref: '#/components/schemas/DemandUrgency'
       due_date:
         type: string

    DemandDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_name:
          type: string
        user_email:
          type: string
        resource_name:
          type: string
        description:
          type: string
        justification:
          type: string
        urgency:
            $ref: '#/components/schemas/DemandUrgency'
        due_date:
          type: string
        quantity:
          type: integer
        status:
          $ref: '#/components/schemas/DemandStatus'
        date_time:
          type: string

    UpdateDemandDTO:
      type: object
      properties:
        user_name:
          type: string
        user_email:
          type: string
        resource_name:
          type: string
        description:
          type: string
        justification:
          type: string
        urgency:
            $ref: '#/components/schemas/DemandUrgency'
        due_date:
          type: string
        quantity:
          type: integer
        status:
          $ref: '#/components/schemas/DemandStatus'

    ResourceType:
      type: string
      enum:
        - HARDWARE
        - SOFTWARE
        - OTHER

    CreateResourceRequestDTO:
      type: object
      properties:
        name:
          type: string
        type:
            $ref: '#/components/schemas/ResourceType'
        description:
          type: string
        isAvailable:
          type: boolean
        quantity:
          type: integer

    ResourceDTO:
      type: object
      properties:
        name:
          type: string
        type:
            $ref: '#/components/schemas/ResourceType'
        description:
          type: string
        isAvailable:
          type: boolean
        quantity:
          type: integer

    AllocationStatus:
      type: string
      enum:
        - RETURNED
        - NOT_RETURNED
        - NON_RETURNABLE

    AllocateResourceRequestDTO:
      type: object
      properties:
        demand_id:
          type: integer
          format: int64
        user_email:
          type: string
        resource_name:
          type: string
        quantity:
          type: integer

    RejectDemandRequestDTO:
      type: object
      required:
        - demand_id
        - user_email
        - resource_name
        - reject_reason
      properties:
        demand_id:
          type: integer
          format: int64
        user_email:
          type: string
        resource_name:
          type: string
        reject_reason:
          type: string

    AllocatedResourceDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        demand_id:
          type: integer
          format: int64
        user_email:
          type: string
        resource_name:
          type: string
        quantity:
          type: integer
        demand_date:
          type: string
        allocation_date:
          type: string
        status:
            $ref: '#/components/schemas/AllocationStatus'

    PasswordResetRequestDTO:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"

    PasswordResetDTO:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
        newPassword:
          type: string



















